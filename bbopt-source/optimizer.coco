"""
The main BBopt interface.
"""

import os
import json
import pickle
import math
import itertools
import time

import numpy as np
from portalocker import Lock
from skopt.plots import (
    partial_dependence,
    plot_evaluations,
    plot_objective,
)

from bbopt.registry import (
    backend_registry,
    init_backend,
    alg_registry,
)
from bbopt.params import param_processor
from bbopt.util import (
    Str,
    norm_path,
    json_serialize,
    best_example,
    sync_file,
    ensure_file,
    clear_file,
    denumpy_all,
    sorted_examples,
    running_best,
    plot,
)
from bbopt.constants import (
    data_file_ext,
    lock_timeout,
    default_alg,
    default_protocol,
)
from bbopt.backends.serving import ServingBackend
from bbopt.backends.skopt import SkoptBackend


class BlackBoxOptimizer:
    """Main bbopt optimizer object. See https://github.com/evhub/bbopt for documentation."""

    def __init__(self, file, protocol=None):
        """Construct a new BlackBoxOptimizer. It is recommended to pass file=__file__."""
        if not isinstance(file, Str):
            raise TypeError("file must be a string")
        self._file = norm_path(file)

        if protocol is None:
            # auto-detect protocol
            self._protocol = "json"
            if not os.path.exists(self.data_file):
                self._protocol = default_protocol
        else:
            self._protocol = protocol

        self.reload()

    # Private utilities:

    @property
    def _using_json(self):
        """Whether we are currently saving in json or pickle."""
        return self._protocol == "json"

    def _loads(self, raw_contents):
        """Load data from the given raw data string."""
        if self._using_json:
            return json.loads(str(raw_contents, encoding="utf-8"))
        else:
            return pickle.loads(raw_contents)

    def _dumps(self, unserialized_data):
        """Dump data to a raw data string."""
        if self._using_json:
            return json.dumps(unserialized_data |> json_serialize).encode(encoding="utf-8")
        else:
            return pickle.dumps(unserialized_data, protocol=self._protocol)

    @property
    def _got_reward(self) =
        """Whether we have seen a maximize/minimize call yet."""
        "loss" in self._current_example or "gain" in self._current_example

    def _param(self, name, func, *args, **kwargs):
        """Create a black box parameter and return its value."""
        if self._got_reward:
            raise ValueError("all parameter definitions must come before maximize/minimize")
        if not isinstance(name, Str):
            raise TypeError(f"name must be a string, not {name}")
        if name in self._new_params:
            raise ValueError(f"parameter of name {name} already exists")

        args = param_processor.standardize_args(func, args)
        kwargs = param_processor.standardize_kwargs(kwargs)

        value = self.backend.param(name, func, *args, **kwargs)
        self._new_params[name] = (func, args, kwargs)
        self._current_example["values"][name] = value
        return value

    def _set_reward(self, reward_type, value):
        """Set the gain or loss to the given value."""
        if self._got_reward:
            raise ValueError("only one call to maximize or minimize is allowed")
        if isinstance(value, np.ndarray):
            if len(value.shape) != 1:
                raise ValueError(f"gain/loss must be a scalar or 1-dimensional array, not {value}")
            value = tuple(value)
        self._current_example[reward_type] = denumpy_all(value)
        if not self.is_serving:
            self._save_current_data()

    def _add_examples(self, examples):
        """Load the given examples into memory."""
        for ex in examples:
            if ex not in self._examples:
                self._examples.append(ex)

    def _load_from(self, df):
        """Load data from the given file."""
        contents = df.read()
        if contents:
            {"params": params, "examples": examples} = self._loads(contents)
            self._old_params = params
            self._add_examples(examples)

    def _load_data(self):
        """Load examples from data file."""
        ensure_file(self.data_file)
        with Lock(self.data_file, "rb", timeout=lock_timeout) as df:
            self._load_from(df)

    def _save_current_data(self):
        """Save examples to data file."""
        assert "timestamp" not in self._current_example, f"multiple _save_current_data calls on _current_example = {self._current_example}"
        with Lock(self.data_file, "rb+", timeout=lock_timeout) as df:
            # we create the timestamp while we have the lock to ensure its uniqueness
            self._current_example["timestamp"] = time.time()
            self._add_examples([self._current_example])
            self._save_to(df)

    def _save_to(self, df):
        """Save to the given open data file."""
        self._load_from(df)
        clear_file(df)
        (self.get_data()
            |> self._dumps
            |> df.write)
        sync_file(df)

    @property
    def _file_name(self) =
        """The base name of the given file."""
        os.path.splitext(os.path.basename(self._file))[0]

    @property
    def _metric(self) =
        """Whether using a gain, a loss, or no examples."""
        assert self._examples, "cannot determine metric from empty examples"
        "gain" if "gain" in self._examples[0] else "loss"

    _skopt_backend_args = None
    _skopt_backend = None

    def _get_skopt_backend(self):
        """Get a scikit-optimize backend regardless of whether currently using one."""
        if isinstance(self.backend, SkoptBackend):
            return self.backend

        skopt_backend_args = (self._examples, self._old_params)
        if self._skopt_backend_args == skopt_backend_args:
            return self._skopt_backend

        self._skopt_backend_args = skopt_backend_args
        self._skopt_backend = SkoptBackend(*skopt_backend_args)
        return self._skopt_backend

    def _array_param(self, func, name, shape, kwargs):
        """Create a new array parameter for the given name and shape with entries from func."""
        if not isinstance(name, Str):
            raise TypeError(f"name must be string, not {name}")
        arr = np.zeros(shape)
        for indices in itertools.product(*map(range, shape)):
            index_str = ",".join(map(str, indices))
            cell_name = f"{name}[{index_str}]"
            proc_kwargs = kwargs |> param_processor.modify_kwargs$(-> _[indices])
            arr[indices] = func(cell_name, **proc_kwargs)
        return arr

    # External API:

    def reload(self):
        """Completely reload the optimizer."""
        self._old_params = {}
        self._examples = []
        self._load_data()
        self.run(alg=None)  # backend is set to serving by default

    def run_backend(self, backend, *args, **options):
        """Optimize parameters using the given backend."""
        self.backend = init_backend(backend, self._examples, self._old_params, *args, **options)
        self._new_params = {}
        self._current_example = {"values": {}}

    @property
    def algs(self) =
        """All algorithms supported by run."""
        alg_registry.asdict()

    def run(self, alg=default_alg):
        """Optimize parameters using the given algorithm
        (use .algs to get the list of valid algorithms)."""
        backend, options = alg_registry[alg]
        self.run_backend(backend, **options)

    def remember(self, info):
        """Store a dictionary of information about the current run."""
        if self._got_reward:
            raise ValueError("remember calls must come before maximize/minimize")
        self._current_example.setdefault("memo", {}).update(info)

    def minimize(self, value):
        """Set the loss of the current run."""
        self._set_reward("loss", value)

    def maximize(self, value):
        """Set the gain of the current run."""
        self._set_reward("gain", value)

    @property
    def is_serving(self) =
        """Whether we are currently using the serving backend or not."""
        isinstance(self.backend, ServingBackend)

    @property
    def data_file(self) =
        """The path to the file we are saving data to."""
        os.path.splitext(self._file)[0] + data_file_ext + (".json" if self._using_json else ".pickle")

    def get_data(self):
        """Get all currently-loaded data as a dictionary containing params and examples."""
        self._old_params.update(self._new_params)
        return {
            "params": self._old_params,
            "examples": self._examples,
        }

    @property
    def num_examples(self) =
        """The number of examples seen so far (current example not counted until maximize/minimize call)."""
        len(self._examples)

    def save_data(self):
        """Forcibly saves data."""
        with Lock(self.data_file, "rb+", timeout=lock_timeout) as df:
            self._save_to(df)

    def tell_examples(self, examples):
        """Adds the given examples to memory and writes the current memory to disk."""
        self._add_examples(examples)
        self.save_data()

    def get_current_run(self):
        """Return a dictionary containing the current parameters and reward."""
        try:
            return self._current_example
        except AttributeError:
            raise ValueError("get_current_run calls must come after run")

    def get_optimal_run(self):
        """Return a dictionary containing the optimal parameters and reward computed so far."""
        return best_example(self._examples)

    # Plotting functions:

    def plot_convergence(self, ax=None, yscale=None):
        """Plot the best gain/loss over the history of optimization.
        Based on skopt.plots.plot_convergence."""
        if not self._examples:
            raise ValueError("no existing data available to be plotted")

        iterations = range(1, len(self._examples) + 1)
        best_metrics = (
            self._examples
            |> sorted_examples
            |> running_best
            |> map$(.[self._metric])
            |> list
        )

        return plot(
            iterations,
            best_metrics,
            ax=ax,
            yscale=yscale,
            title=f"Convergence plot for {self._file_name}",
            xlabel="Number of trials $n$",
            ylabel=f"Best {self._metric} after $n$ trials",
        )

    def plot_history(self, ax=None, yscale=None):
        """Plot the gain/loss of every point in the order in which they were sampled."""
        if not self._examples:
            raise ValueError("no existing data available to be plotted")

        iterations = range(1, len(self._examples) + 1)
        metrics = (
            self._examples
            |> sorted_examples
            |> map$(.[self._metric])
            |> list
        )

        return plot(
            iterations,
            metrics,
            ax=ax,
            yscale=yscale,
            title=f"History plot for {self._file_name}",
            xlabel="Number of trials $n$",
            ylabel=f"The {self._metric} on the $n$th trial",
        )

    def partial_dependence(self, i_name, j_name=None, *args, **kwargs):
        """Calls skopt.plots.partial_dependence where i_name and j_name are parameter names."""
        if not self._examples:
            raise ValueError("no existing data available to be plotted")

        skopt_backend = self._get_skopt_backend()

        sorted_names = list(sorted(self._old_params))
        i = sorted_names.index(i_name)
        j = None if j_name is None else sorted_names.index(j_name)

        return partial_dependence(
            skopt_backend.space,
            skopt_backend.model,
            i,
            j,
            *args,
            **kwargs,
        )

    def plot_partial_dependence_1D(self, i_name, ax=None, yscale=None, **kwargs):
        """Constructs a 1D partial dependence plot using self.partial_dependence."""
        xi, yi = self.partial_dependence(i_name, **kwargs)
        return plot(
            xi,
            yi,
            ax=ax,
            yscale=yscale,
            title=f"Partial dependence of {i_name}",
            xlabel=f"Values of {i_name}",
            ylabel=f"The loss at each point",
        )

    def plot_evaluations(self, *args, **kwargs):
        """Calls skopt.plots.plot_evaluations."""
        if not self._examples:
            raise ValueError("no existing data available to be plotted")

        skopt_backend = self._get_skopt_backend()

        return plot_evaluations(
            skopt_backend.result,
            *args,
            **kwargs,
        )

    def plot_objective(self, *args, **kwargs):
        """Calls skopt.plots.plot_objective."""
        if not self._examples:
            raise ValueError("no existing data available to be plotted")

        skopt_backend = self._get_skopt_backend()

        return plot_objective(
            skopt_backend.result,
            *args,
            **kwargs,
        )

    # Base random functions:

    def randrange(self, name, *args, **kwargs):
        """Create a new parameter with the given name modeled by random.randrange(*args)."""
        return self._param(name, "randrange", *args, **kwargs)

    def choice(self, name, seq, **kwargs):
        """Create a new parameter with the given name modeled by random.choice(seq)."""
        return self._param(name, "choice", seq, **kwargs)

    def uniform(self, name, a, b, **kwargs):
        """Create a new parameter with the given name modeled by random.uniform(a, b)."""
        return self._param(name, "uniform", a, b, **kwargs)

    def triangular(self, name, low, high, mode, **kwargs):
        """Create a new parameter with the given name modeled by random.triangular(low, high, mode)."""
        return self._param(name, "triangular", low, high, mode, **kwargs)

    def betavariate(self, name, alpha, beta, **kwargs):
        """Create a new parameter with the given name modeled by random.betavariate(alpha, beta)."""
        return self._param(name, "betavariate", alpha, beta, **kwargs)

    def expovariate(self, name, lambd, **kwargs):
        """Create a new parameter with the given name modeled by random.expovariate(lambd)."""
        return self._param(name, "expovariate", lambd, **kwargs)

    def gammavariate(self, name, alpha, beta, **kwargs):
        """Create a new parameter with the given name modeled by random.gammavariate(alpha, beta)."""
        return self._param(name, "gammavariate", alpha, beta, **kwargs)

    def normalvariate(self, name, mu, sigma, **kwargs):
        """Create a new parameter with the given name modeled by random.gauss(mu, sigma)."""
        return self._param(name, "normalvariate", mu, sigma, **kwargs)

    def vonmisesvariate(self, name, kappa, **kwargs):
        """Create a new parameter with the given name modeled by random.vonmisesvariate(kappa)."""
        return self._param(name, "vonmisesvariate", kappa, **kwargs)

    def paretovariate(self, name, alpha, **kwargs):
        """Create a new parameter with the given name modeled by random.paretovariate(alpha)."""
        return self._param(name, "paretovariate", alpha, **kwargs)

    def weibullvariate(self, name, alpha, beta, **kwargs):
        """Create a new parameter with the given name modeled by random.weibullvariate(alpha, beta)."""
        return self._param(name, "weibullvariate", alpha, beta, **kwargs)

    # Derived random functions:

    def randint(self, name, a, b, **kwargs):
        """Create a new parameter with the given name modeled by random.randint(a, b)."""
        start, stop = a, b-1
        return self.randrange(name, start, stop, **kwargs)

    def random(self, name, **kwargs):
        """Create a new parameter with the given name modeled by random.random()."""
        return self.uniform(name, 0, 1, **kwargs)

    def getrandbits(self, name, k, **kwargs):
        """Create a new parameter with the given name modeled by random.getrandbits(k)."""
        stop = 2**k
        return self.randrange(name, stop, **kwargs)

    gauss = normalvariate

    def loguniform(self, name, min_val, max_val, **kwargs):
        """Create a new parameter with the given name modeled by
        math.exp(random.uniform(math.log(min_val), math.log(max_val)))."""
        kwargs |>= param_processor.modify_kwargs$(math.log)
        log_a, log_b = math.log(min_val), math.log(max_val)
        return math.exp(self.uniform(name, log_a, log_b, **kwargs))

    def lognormvariate(self, name, mu, sigma, **kwargs):
        """Create a new parameter with the given name modeled by random.lognormvariate(mu, sigma)."""
        kwargs |>= param_processor.modify_kwargs$(math.log)
        return math.exp(self.normalvariate(name, mu, sigma, **kwargs))

    def randbool(self, name, **kwargs):
        """Create a new boolean parameter with the given name."""
        return self.choice(name, [False, True], **kwargs)

    def sample(self, name, population, k, **kwargs):
        """Create a new parameter with the given name modeled by random.sample(population, k)."""
        if not isinstance(name, Str):
            raise TypeError(f"name must be string, not {name}")
        sampling_population = [x for x in population]
        sample = []
        for i in range(k):
            if len(sampling_population) <= 1:
                sample.append(sampling_population[0])
            else:
                proc_kwargs = kwargs |> param_processor.modify_kwargs$(
                    def val ->
                        elem = val$[i];
                        sampling_population.index(elem) if elem in sampling_population else 0
                )
                ind = self.randrange(f"{name}[{i}]", len(sampling_population), **proc_kwargs)
                sample.append(sampling_population.pop(ind))
        return sample

    def shuffled(self, name, population, **kwargs):
        """Create a new parameter with the given name modeled by
        random.shuffle(population) except returned instead of modified in place."""
        return self.sample(name, population, len(population), **kwargs)

    # Array-based random functions:

    def rand(self, name, *shape, **kwargs):
        """Create a new array parameter for the given name and shape modeled by np.random.rand."""
        return self._array_param(self.random, name, shape, kwargs)

    def randn(self, name, *shape, **kwargs):
        """Create a new array parameter for the given name and shape modeled by np.random.randn."""
        return self._array_param(self.normalvariate$(?, 0, 1), name, shape, kwargs)
