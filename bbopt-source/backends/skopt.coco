"""
The scikit-optimize backend. Does black box optimization using scikit-optimize.
"""

from skopt import Optimizer
from skopt.space import (
    Categorical,
    Integer,
    Real,
)

from bbopt.util import sorted_items
from bbopt.backends.util import (
    Backend,
    split_examples,
    make_values,
)


# Utilities:

def create_dimension(name, func, *args):
    """Create a scikit-optimize dimension for the given param kwargs."""
    case func:
        match "choice":
            return Categorical(*args)
        match "randrange":
            start, stop, step = args
            if step != 1:
                raise ValueError("the scikit-optimize backend only supports a randrange step size of 1")
            stop -= 1  # scikit-optimize ranges are inclusive
            return Integer(start, stop)
        match "uniform":
            return Real(*args)
    raise TypeError(f"insufficiently specified parameter {name}")


# Backend:

class SkoptBackend(Backend):
    """The scikit-optimize backend uses scikit-optimize for black box optimization."""
    backend_name = "scikit-optimize"
    implemented_funcs = (
        # should match create_dimension above
        "choice",
        "randrange",
        "uniform",
    )

    def __init__(self, examples, params, base_estimator="gp", **options):
        self.init_fallback_backend()

        if not examples:
            self.current_values = {}
            return

        data_points, losses = split_examples(examples, params)
        dimensions = [
            create_dimension(name, func, *args)
            for name, (func, args, kwargs) in sorted_items(params)
        ]

        if isinstance(base_estimator, str):
            base_estimator = py_str(base_estimator)

        optimizer = Optimizer(dimensions, base_estimator, **options)
        optimizer.tell(data_points, losses)
        current_point = optimizer.ask()

        self.current_values = make_values(params, current_point)


# Registered names:

SkoptBackend.register()
SkoptBackend.register_alg("gaussian_process", base_estimator="GP")
SkoptBackend.register_alg("random_forest", base_estimator="RF")
SkoptBackend.register_alg("extra_trees", base_estimator="ET")
SkoptBackend.register_alg("gradient_boosted_regression_trees", base_estimator="GBRT")
