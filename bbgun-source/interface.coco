"""
The interface into BBGun for a file with black-box parameters.
"""

from bbgun.util import (
    is_str,
    is_num,
    norm_path,
)

global bbs_by_file = {}

class BB:
    def __init__(self, *, file=None):
        if not is_str(file):
            raise TypeError("file must be a string")
        self._file = norm_path(file)
        if self._file in bbs_by_file:
            raise ValueError("BB instance for file %r already exists" % self.file)
        bbs_by_file[self.file] = self
        self._params = {}
        self._examples = []
        self._current_example = {}
        self._backend = None
        self._load_examples()

    def param(self, *, name=None, choose=None):
        if not is_str(name):
            raise TypeError("name must be a string")
        if name in self._params:
            raise ValueError("parameter of name %r already exists" % name)
        if choose is None:
            raise TypeError("choose must be an iterable")
        self._params[name] = {"choose": choose}
        value = self._select_value(name)
        self._current_example[name] = value
        return value

    def maximize(self, *, value=None):
        if callable(value):
            value = value()
        if not is_num(value):
            raise TypeError("value must be a number")
        self._current_example["gain"] = value

    def minimize(self, *, value=None):
        if callable(value):
            value = value()
        if not is_num(value):
            raise TypeError("value must be a number")
        self._current_example["loss"] = value

    def run(self, *, backend=None):
        from bbgun.backends import get_backend
        self._backend = get_backend(backend)
