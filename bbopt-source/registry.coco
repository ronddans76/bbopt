"""
The backend and algorithm registries.
"""

import traceback


class Registry:
    """Registry that keeps track of registered objects."""

    def __init__(self, obj_name="obj", defaults=None, generators={}, aliases={}):
        self.obj_name = obj_name
        self.registered = {} if defaults is None else defaults
        self.generators = generators
        self.aliases = aliases

    def __getitem__(self, name):
        name = self.aliases.get(name, name)
        match {=name: value, **_} in self.registered:
            return self.registered[name]
        else: if name in self.generators:
            return self.run_gen(name)
        else:
            raise ValueError("unknown {obj_name}: {name} (valid {obj_name}s: {valid_names})".format(
                obj_name=self.obj_name,
                name=name,
                valid_names=", ".join(repr(name) for name in self),
            ))

    def register(self, name, value):
        """Register value under the given name."""
        self.registered[name] = value

    def run_gen(self, name):
        """Run the generator for the given name."""
        value = self.generators[name]()
        self.register(name, value)
        del self.generators[name]
        return value

    def __iter__(self):
        yield from self.registered
        yield from self.generators

    def run_all_gens(self):
        """Run all generators."""
        for name in self.generators:
            self.run_gen(name)

    def items(self):
        """Get all items in the registry as (name, value) pairs."""
        self.run_all_gens()
        yield from self.registered.items()

    def asdict(self):
        """Convert registry to dictionary."""
        self.run_all_gens()
        return self.registered


backend_registry = Registry(
    obj_name="backend",
    generators={
        "serving": (def -> from bbopt.backends.serving import ServingBackend; ServingBackend),
        "random": (def -> from bbopt.backends.random import RandomBackend; RandomBackend),
        "scikit-optimize": (def -> from bbopt.backends.skopt import SkoptBackend; SkoptBackend),
        "hyperopt": (def -> from bbopt.backends.hyperopt import HyperoptBackend; HyperoptBackend),
        "mixture": (def -> from bbopt.backends.mixture import MixtureBackend; MixtureBackend),
    },
    aliases={
        None: "serving",
    }
)


def init_backend(name, examples, params, *args, **kwargs):
    """Create a backend object of the given name with the given data."""
    return backend_registry[name](examples, params, *args, **kwargs)


alg_registry = Registry(
    obj_name="algorithm",
    defaults={
        "serving": ("serving", {}),
        "random": ("random", {}),
        "gaussian_process": ("scikit-optimize", {}),
        "random_forest": ("scikit-optimize", dict(base_estimator="RF")),
        "extra_trees": ("scikit-optimize", dict(base_estimator="ET")),
        "gradient_boosted_regression_trees": ("scikit-optimize", dict(base_estimator="GBRT")),
        "tree_structured_parzen_estimator": ("hyperopt", {}),
    },
    generators={
        "annealing": (def -> from hyperopt import anneal; ("hyperopt", dict(algo=anneal.suggest))),
    },
    aliases={
        None: "serving",
    }
)
