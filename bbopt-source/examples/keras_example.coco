# Imports:

import csv
import os.path
from pprint import pprint

import numpy as np

from keras.models import Sequential
from keras.layers import Dense, Activation
from keras.optimizers import SGD
from keras.utils import to_categorical

# Data processing:

data_file = os.path.join(os.path.dirname(__file__), "house_votes.csv")

X = []
y = []
with open(data_file, "r") as house_votes:
    for row in csv.reader(house_votes):
        target, features = row[0], row[1:]
        target |> (->
            1 if _ == "democrat"
            else 0 if _ == "republican"
            else (def -> raise TypeError("unknown party %r" % _))(_)
        ) |> y.append
        features |> map$(->
            1 if _ == "y"
            else -1 if _ == "n"
            else 0 if _ == "?"
            else (def -> raise TypeError("unknown vote %r" % _))(_)
        ) |> list |> X.append

y |>= to_categorical
X |>= np.asarray

train_split = .6*len(X) |> int
validate_split = train_split + .2*len(X) |> int

X_train, X_validate, X_test = X[:train_split], X[train_split:validate_split], X[validate_split:]
y_train, y_validate, y_test = y[:train_split], y[train_split:validate_split], y[validate_split:]

# BBOpt setup:

from bbopt import BlackBoxOptimizer
bb = BlackBoxOptimizer(file=__file__)

try:
    N = int(sys.argv[1])
except Exception:
    N = 5

for i in bb.loop(n=N, backend="scikit-optimize"):

    # Main program:

    print("\n= %d =" % i)

    model = Sequential()

    hidden_neurons = bb.randint("hidden neurons", 1, 10, guess=2)

    model.add(Dense(units=hidden_neurons, input_dim=len(X_train[0])))
    model.add(Activation("relu"))
    model.add(Dense(units=2))
    model.add(Activation("softmax"))

    model.compile(
        loss="categorical_crossentropy",
        optimizer=SGD(
            lr=bb.uniform("learning rate", 0, 0.2, guess=0.01),
            momentum=bb.uniform("momentum", 0, 1, guess=0.9),
            nesterov=bb.getrandbits("nesterov", 1, guess=1) |> bool,
            decay=bb.uniform("decay", 0, 0.1, guess=0.001),
        ),
        metrics=["accuracy"],
    )

    train_history = model.fit(
        X_train,
        y_train,
        epochs=100,
        batch_size=bb.randint("batch size", 1, 32, guess=16),
        verbose=0,
    )

    pprint(bb.get_current_run())

    train_loss, train_acc = train_history.history["loss"][-1], train_history.history["acc"][-1]
    print("training loss = %r\ntraining accuracy = %r" % (train_loss, train_acc))

    validation_loss, validation_acc = model.evaluate(X_validate, y_validate, verbose=0)
    print("validation loss = %r\nvalidation accuracy = %r" % (validation_loss, validation_acc))

    bb.minimize(validation_loss)

    test_loss, test_acc = model.evaluate(X_test, y_test, verbose=0)
    print("test loss = %r\ntest accuracy = %r" % (test_loss, test_acc))

    bb.remember({
        "training loss": train_loss,
        "training accuracy": train_acc,
        "validation loss": validation_loss,
        "validation accuracy": validation_acc,
        "test loss": test_loss,
        "test accuracy": test_acc,
    })

print("\n= BEST =")
pprint(bb.get_optimal_run())
