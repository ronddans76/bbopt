"""
Utilities for use across all of BBGun.
"""

# Imports:

import os.path
from collections.abc import Mapping, Iterable

# Functions:

def is_str(obj) =
    isinstance(obj, (str, py_str))

def norm_path(path) = (
    path
    |> os.path.expanduser
    |> os.path.abspath
    |> os.path.realpath
    |> os.path.normcase
)

def json_serialize(obj):
    """Serialize obj for encoding in JSON."""
    if isinstance(obj, (int, float, str)):
        return obj
    elif isinstance(obj, bytes):
        return str(obj, encoding="utf-8")
    elif isinstance(obj, Mapping):
        serialized_dict = {}
        for k, v in obj.items():
            serialized_k = json_serialize(k)
            if not isinstance(serialized_k, str):
                raise TypeError("dict keys must be strings, not %r" % k)
            serialized_dict[k] = json_serialize(v)
        return serialized_dict
    elif isinstance(obj, Iterable):
        serialized_list = []
        for x in obj:
            serialized_list.append(json_serialize(x))
        return serialized_list
    else:
        raise TypeError("invalid JSON object %r" % obj)

def values_sorted_by_keys(params):
    """Return an iterator of the dict's values sorted by its keys."""
    for _, v in sorted(params.items()):
        yield v

def split_examples(examples):
    """Split examples into a list of data points, a list of objectives, and whether maximizing (True), minimizing (False), or no data (None)."""
    data_points, objectives, maximizing = [], [], None
    for example in examples:
        case example:
            match {"values": values, "gain": gain}:
                if maximizing is False:
                    raise ValueError("cannot have examples with maximize and examples with minimize")
                maximizing = True
                data_points.append(values |> values_sorted_by_keys)
                objectives.append(gain)
            match {"values": values, "loss": loss}:
                if maximizing is True:
                    raise ValueError("cannot have examples with maximize and examples with minimize")
                maximizing = False
                data_points.append(values |> values_sorted_by_keys)
                objectives.append(loss)
        else:
            raise ValueError("invalid example %r" % example)
    return data_points, objectives, maximizing

def replace_values(params, point):
    """Return a dictionary with the values replaced."""
    values = {}
    for i, (k, _) in enumerate(sorted(params.items())):
        values[k] = point[i]
    return values
