"""
BBopt command line interface.
"""

import os
import sys
import argparse
import subprocess
from concurrent.futures import ProcessPoolExecutor
from pprint import pprint

from bbopt.optimizer import BlackBoxOptimizer
from bbopt.constants import (
    description,
    default_trials,
    default_jobs,
)


parser = argparse.ArgumentParser(
    prog="bbopt",
    description=description,
)

parser.add_argument(
    "file",
    metavar="file",
    type=str,
    help="path to the Python file to run",
)

parser.add_argument(
    "-n", "--num-trials",
    metavar="trials",
    type=int,
    default=default_trials,
    help="number of trials to run (defaults to {})".format(default_trials),
)

parser.add_argument(
    "-j", "--jobs",
    metavar="processes",
    type=int,
    default=default_jobs,
    help="number of processes to use (defaults to {})".format(default_jobs),
)

parser.add_argument(
    "-q", "--quiet",
    action="store_true",
    help="suppress all informational output",
)

parser.add_argument(
    "--python",
    metavar="executable",
    type=str,
    default=sys.executable,
    help="the python executable to use (defaults to the current python)"
)

parser.add_argument(
    "--args",
    type=str,
    nargs=argparse.REMAINDER,
    help="arguments to pass to the file being run",
)


def base_show(quiet, msg):
    """Show the given message with [BBopt] if not quiet."""
    if not quiet:
        print("[BBopt]", msg)


def run_trial(args, cmd, i):
    """Pickleable function for running trials in parallel."""
    show = base_show$(args.quiet)
    show("{}/{} starting...".format(i+1, args.num_trials))
    subprocess.check_call(cmd)
    show("{}/{} finished.".format(i+1, args.num_trials))


def main():
    args = parser.parse_args()
    if not os.path.isfile(args.file):
        raise ValueError("could not find file {}".format(args.file))

    show = base_show$(args.quiet)
    cmd = [args.python, args.file] + (args.args ?? [])

    show("Running {} trials using {} process(es) of:\n\t> {}".format(
        args.num_trials,
        args.jobs,
        " ".join(cmd),
    ))

    if args.jobs == 1:
        for i in range(args.num_trials):
            run_trial(args, cmd, i)
    else:
        with ProcessPoolExecutor(args.jobs) as executor:
            for i in range(args.num_trials):
                executor.submit(run_trial, args, cmd, i)

    if not args.quiet:
        bb = BlackBoxOptimizer(args.file)
        show("Black box optimization finished; data saved to {}.".format(os.path.relpath(bb.data_file)))

        best_example = bb.get_optimal_run()
        show("Summary of best run:")
        pprint(bb.get_optimal_run())
