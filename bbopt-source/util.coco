"""
Utilities for use across all of bbopt.
"""

# Imports:

import os.path
from collections.abc import Mapping, Iterable

# Objects:

Num = (int, float)
Str = (str, py_str)

# Functions:

def norm_path(path) = (
    path
    |> os.path.expanduser
    |> os.path.abspath
    |> os.path.realpath
    |> os.path.normcase
)

def json_serialize(obj):
    """Serialize obj for encoding in JSON."""
    if obj is None or isinstance(obj, (bool, int, float, str)):
        return obj
    if isinstance(obj, bytes):
        return str(obj, encoding="utf-8")
    if isinstance(obj, Mapping):
        serialized_dict = {}
        for k, v in obj.items():
            serialized_k = json_serialize(k)
            if not isinstance(serialized_k, str):
                raise TypeError("dict keys must be strings, not %r" % k)
            serialized_dict[k] = json_serialize(v)
        return serialized_dict
    if isinstance(obj, Iterable):
        serialized_list = []
        for x in obj:
            serialized_list.append(json_serialize(x))
        return serialized_list
    if type(obj).__module__ == "numpy":
        import numpy as np
        if np.issubdtype(obj, int):
            return int(obj)
        if np.issubdtype(obj, float):
            return float(obj)
        if np.issubdtype(obj, bool):
            return bool(obj)
    raise TypeError("invalid JSON object %r" % obj)

def sorted_items(params) =
    """Return an iterator of the dict's values sorted by its keys."""
    sorted(params.items())

def split_examples(examples):
    """Split examples into a list of data points, a list of objectives, and whether minimizing (True), maximizing (False), or no data (None)."""
    data_points, objectives, minimizing = [], [], None
    for example in examples:
        case example:
            match {"values": values, "gain": gain}:
                if minimizing is True:
                    raise ValueError("cannot have examples with maximize and examples with minimize")
                minimizing = False
                data_points.append(values |> sorted_items |> map$(.[1]) |> list)
                objectives.append(gain)
            match {"values": values, "loss": loss}:
                if minimizing is False:
                    raise ValueError("cannot have examples with maximize and examples with minimize")
                minimizing = True
                data_points.append(values |> sorted_items |> map$(.[1]) |> list)
                objectives.append(loss)
        else:
            raise ValueError("invalid example %r" % example)
    return data_points, objectives, minimizing

def replace_values(params, point):
    """Return a dictionary with the values replaced by the values in point,
    where point is a list of the values corresponding to the sorted params."""
    values = {}
    for i, (k, _) in enumerate(sorted(params.items())):
        values[k] = point[i]
    return values

def all_isinstance(objs, types) =
    """Return whether all the objects have the desired type(s)."""
    objs |> map$(isinstance$(?, types)) |> all

def format_err(Error, message, object):
    """Creates an error with a formatted error message."""
    return Error(message + ": " + repr(object))
