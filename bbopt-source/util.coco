"""
Utilities for use across all of bbopt.
"""

import os.path
from collections.abc import Mapping, Iterable


Num = (int, float)
Str = (str, py_str)


def norm_path(path) =
    """Normalize the given path."""
    (path
    |> os.path.expanduser
    |> os.path.abspath
    |> os.path.realpath
    |> os.path.normcase)


def json_serialize(obj):
    """Serialize obj for encoding in JSON."""
    if obj is None or isinstance(obj, (int, float, bool, str)):
        return obj
    if isinstance(obj, bytes):
        return str(obj, encoding="utf-8")
    if isinstance(obj, Mapping):
        serialized_dict = {}
        for k, v in obj.items():
            serialized_k = json_serialize(k)
            if not isinstance(serialized_k, str):
                raise TypeError("dict keys must be strings, not {}".format(k))
            serialized_dict[k] = json_serialize(v)
        return serialized_dict
    if isinstance(obj, Iterable):
        serialized_list = []
        for x in obj:
            serialized_list.append(json_serialize(x))
        return serialized_list
    if type(obj).__module__ == "numpy":
        import numpy as np
        # the ordering here is extremely important; int must come before
        #  bool, since otherwise this will cast all ints to bools
        if np.issubdtype(obj, np.number) or np.issubdtype(obj, np.unsignedinteger):
            return int(obj)
        if np.issubdtype(obj, np.floating):
            return float(obj)
        if np.issubdtype(obj, np.bool_):
            return bool(obj)
        if np.issubdtype(obj, np.str_):
            return json_serialize(py_str(obj))
    raise TypeError("cannot JSON serialize {}".format(obj))


def sorted_items(params) =
    """Return an iterator of the dict's items sorted by its keys."""
    sorted(params.items())


def negate_objective(objective):
    if isinstance(objective, list):
        return objective |> map$(negate_objective) |> list
    else:
        return -objective


def make_features(values, params, fallback_func):
    """Return an iterator of the values for the parameters in sorted order with the given fallback function."""
    for name, param_kwargs in sorted_items(params):
        match {=name: feature, **_} in values:
            yield feature
        else: match {"placeholder_when_missing": placeholder_value, **_} in param_kwargs:
            yield placeholder_value
        else:
            yield fallback_func(name, **param_kwargs)


def split_examples(examples, params, fallback_func):
    """Split examples into a list of data points and a list of losses with the given fallback function."""
    data_points, losses = [], []
    for example in examples:
        case example:
            match {"values": values, "gain": gain, **_}:
                loss = negate_objective(gain)
            match {"values": values, "loss": loss, **_}:
                pass
        else:
            raise ValueError("invalid example {}".format(example))
        make_features(values, params, fallback_func) |> list |> data_points.append
        loss |> losses.append
    return data_points, losses


def make_values(params, point):
    """Return a dictionary with the values replaced by the values in point,
    where point is a list of the values corresponding to the sorted params."""
    values = {}
    for i, k in params |> sorted |> enumerate:
        values[k] = point[i]
    return values


def all_isinstance(objs, types) =
    """Return whether all the objects have the desired type(s)."""
    objs |> map$(isinstance$(?, types)) |> all


def format_err(Error, message, obj) =
    """Creates an error with a formatted error message."""
    Error(message + ": " + repr(obj))


def best_example(examples):
    """Return the best example seen so far."""
    selected_example = {"values": {}}
    max_gain, min_loss = None, None
    for example in examples:
        case example:
            match {"values": values, "gain": gain, **_}:
                if min_loss is not None:
                    raise ValueError("cannot have examples with maximize and examples with minimize")
                if max_gain is None or gain >= max_gain:
                    selected_example = example
                    max_gain = gain
            match {"values": values, "loss": loss, **_}:
                if max_gain is not None:
                    raise ValueError("cannot have examples with maximize and examples with minimize")
                if min_loss is None or loss <= min_loss:
                    selected_example = example
                    min_loss = loss
        else:
            raise ValueError("invalid example {}".format(example))
    return selected_example


def serve_values(param_name, param_kwargs, serving_values, fallback_func):
    """Serve a value for the given kwargs using the given values and fallback function."""
    match {=param_name: value, **_} in serving_values:
        return value
    else: match {"guess": guess, **_} in param_kwargs:
        return guess
    else:
        return fallback_func(param_name, **param_kwargs)
