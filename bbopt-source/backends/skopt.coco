"""
The scikit-optimize backend. Does black box optimization using scikit-optimize.
"""

# Imports:

from skopt import Optimizer
from skopt.learning import GaussianProcessRegressor

from bbopt.backends.random import RandomBackend
from bbopt.params import param_processor
from bbopt.util import (
    sorted_items,
    split_examples,
    replace_values,
    negate_objective,
)

# Utilities:

def create_dimension(
    name,
    choice=None,
    randrange=None,
    uniform=None,
):
    if choice is not None:
        return choice  # lists are interpreted as choices
    if randrange is not None:
        start, stop, step = randrange
        if step != 1:
            raise ValueError("scikit-optimize backend only supports a randrange step size of 1")
        stop -= 1  # scikit-optimize ranges are inclusive
        return (start, stop) # int tuples are interpreted as int ranges
    if uniform is not None:
        return uniform |> map$(float) |> tuple  # float tuples are interpreted as float ranges
    raise TypeError("insufficiently specified parameter %r" % name)

# Backend:

class SkoptBackend:
    """The scikit-optimize backend uses scikit-optimize for black box optimization."""

    def __init__(self, examples, params, default_placeholder=None, base_estimator=GaussianProcessRegressor, **kwargs):
        dimensions = [
            create_dimension(name, **param_processor.filter_kwargs(param_kwargs))
            for name, param_kwargs in sorted_items(params)
        ]
        data_points, losses = split_examples(examples, params, default_placeholder)
        if data_points:
            optimizer = Optimizer(dimensions, base_estimator, **kwargs)
            optimizer.tell(data_points, losses)
            current_point = optimizer.ask()
            self.current_values = replace_values(params, current_point)
        else:
            self.current_values = {}

    def param(self, name, **kwargs):
        if name in self.current_values:
            return self.current_values[name]
        elif "guess" in kwargs:
            return kwargs["guess"]
        else:
            return RandomBackend().param(**kwargs)
