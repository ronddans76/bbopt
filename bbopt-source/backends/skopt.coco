"""
The scikit-optimize backend. Does black box optimization using scikit-optimize.
"""

from skopt import Optimizer
from skopt.space import (
    Categorical,
    Integer,
    Real,
)

from bbopt.util import sorted_items
from bbopt.backends.random import RandomBackend
from bbopt.backends.util import (
    split_examples,
    make_values,
    serve_values,
)


# Utilities:

def create_dimension(name, func, *args):
    """Create a scikit-optimize dimension for the given param kwargs."""
    case func:
        match "choice":
            return Categorical(*args)
        match "randrange":
            start, stop, step = args
            if step != 1:
                raise ValueError("the scikit-optimize backend only supports a randrange step size of 1")
            stop -= 1  # scikit-optimize ranges are inclusive
            return Integer(start, stop)
        match "uniform":
            return Real(*args)
    raise TypeError(f"insufficiently specified parameter {name}")


# Backend:

class SkoptBackend:
    """The scikit-optimize backend uses scikit-optimize for black box optimization."""
    random_backend = RandomBackend()

    def __init__(self, examples, params, base_estimator="gp", **kwargs):
        if not examples:
            self.current_values = {}
            return

        data_points, losses = split_examples(examples, params)
        dimensions = [
            create_dimension(name, func, *args)
            for name, (func, args, kwargs) in sorted_items(params)
        ]

        if isinstance(base_estimator, str):
            base_estimator = py_str(base_estimator)

        optimizer = Optimizer(dimensions, base_estimator, **kwargs)
        optimizer.tell(data_points, losses)
        current_point = optimizer.ask()

        self.current_values = make_values(params, current_point)

    def param(self, name, func, *args, **kwargs) = serve_values(
        name,
        func,
        args,
        kwargs,
        serving_values=self.current_values,
        fallback_func=self.random_backend.param,
        backend_name="scikit-optimize",
        implemented_funcs=(
            # should match create_dimension above
            "choice",
            "randrange",
            "uniform",
        ),
        supported_kwargs=(
            "guess",
            "placeholder_when_missing",
        ),
    )
