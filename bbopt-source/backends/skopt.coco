"""
The scikit-optimize backend. Does black box optimization using scikit-optimize.
"""

from skopt import Optimizer
from skopt.space import (
    Categorical,
    Integer,
    Real,
)

from bbopt.util import sorted_items
from bbopt.backends.util import (
    Backend,
    split_examples,
    make_values,
)


# Utilities:

def create_space(name, func, *args):
    """Create a scikit-optimize space for the given parameter."""
    name = py_str(name)
    case func:
        match "choice":
            return Categorical(*args, name=name)
        match "randrange":
            start, stop, step = args
            if step != 1:
                raise ValueError("the scikit-optimize backend only supports a randrange step size of 1")
            stop -= 1  # scikit-optimize ranges are inclusive
            return Integer(start, stop, name=name)
        match "uniform":
            return Real(*args, name=name)
    raise TypeError(f"insufficiently specified parameter {name}")


def create_dimensions(params) =
    """Construct the full optimization space for the given parameters."""
    [
        create_space(name, func, *args)
        for name, (func, args, kwargs) in sorted_items(params)
    ]


# Backend:

class SkoptBackend(Backend):
    """The scikit-optimize backend uses scikit-optimize for black box optimization."""
    backend_name = "scikit-optimize"
    implemented_funcs = (
        # should match create_space above
        "choice",
        "randrange",
        "uniform",
    )

    def __init__(self, examples, params, base_estimator="GP", **options):
        self.init_fallback_backend()

        if not params:
            self.current_values = {}
            return

        if isinstance(base_estimator, str):
            base_estimator = py_str(base_estimator)
        self.optimizer = Optimizer(create_dimensions(params), base_estimator, **options)

        if examples:
            self.tell_examples(examples, params)
        else:
            self.current_values = {}

    def tell_examples(self, new_examples, params):
        """Special method that allows fast updating of the backend with new examples."""
        data_points, losses = split_examples(new_examples, params)
        self.result = self.optimizer.tell(data_points, losses)

        current_point = self.optimizer.ask()
        self.current_values = make_values(params, current_point)

    @property
    def space(self) =
        """The space over which optimization was performed."""
        self.optimizer.space

    @property
    def model(self) =
        """Get the most recently fit model."""
        self.optimizer.models[-1]


# Registered names:

SkoptBackend.register()
SkoptBackend.register_alias("skopt")
SkoptBackend.register_alg("gaussian_process", base_estimator="GP")
SkoptBackend.register_alg("random_forest", base_estimator="RF")
SkoptBackend.register_alg("extra_trees", base_estimator="ET")
SkoptBackend.register_alg("gradient_boosted_regression_trees", base_estimator="GBRT")
