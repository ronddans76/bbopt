"""
Backends contains all of bbopt's different backends.
"""

class BackendRegistry:
    backend_generators = {
        "serving": (def -> from bbopt.backends.serving import ServingBackend; ServingBackend),
        "random": (def -> from bbopt.backends.random import RandomBackend; RandomBackend),
        "scikit-optimize": (def -> from bbopt.backends.skopt import SkoptBackend; SkoptBackend),
        "hyperopt": (def -> from bbopt.backends.hypteropt import HyperoptBackend; HyperoptBackend),
    }
    registered_backends = {}

    def __getitem__(self, name):
        if name is None:
            name = "serving"
        if name in self.registered_backends:
            return self.registered_backends[name]
        elif name in self.backend_generators:
            backend = self.backend_generators[name]()
            del self.backend_generators[name]
            self.registered_backends[name] = backend
            return backend
        else:
            raise ValueError("unknown backend %r" % name)

    def __iter__(self):
        yield from backend_generators
        yield from registered_backends

    def register_backend(self, name, backend):
        """Register a new backend under the given name."""
        self.registered_backends[name] = backend

    def init_backend(self, name, examples, params, **kwargs):
        """Create a backend object of the given name with the given example data."""
        return self[name](examples, params, **kwargs)

backend_registry = BackendRegistry()
