"""
The scikit-optimize backend. Does black box optimization using scikit-optimize.
"""

from skopt import Optimizer
from skopt.space import (
    Categorical,
    Integer,
    Real,
)

from bbopt.backends.random import RandomBackend
from bbopt.params import param_processor
from bbopt.util import (
    sorted_items,
    split_examples,
    make_values,
    serve_values,
)


# Utilities:

def create_dimension(
    name,
    choice=None,
    randrange=None,
    uniform=None,
):
    """Create a scikit-optimize dimension for the given param kwargs."""
    if choice is not None:
        return Categorical(*choice)
    if randrange is not None:
        start, stop, step = randrange
        if step != 1:
            raise ValueError("the scikit-optimize backend only supports a randrange step size of 1")
        stop -= 1  # scikit-optimize ranges are inclusive
        return Integer(start, stop)
    if uniform is not None:
        return Real(*uniform)
    raise TypeError("insufficiently specified parameter {}".format(name))


strict_split_examples = split_examples$(
    fallback_func=(def (name, **kwargs) ->
        raise ValueError("conditional parameter {} with no placeholder_when_missing not supported by the scikit-optimize backend".format(name))),
)


# Backend:

class SkoptBackend:
    """The scikit-optimize backend uses scikit-optimize for black box optimization."""
    random_backend = RandomBackend()

    def __init__(self, examples, params, base_estimator="gp", **kwargs):
        if not examples:
            self.current_values = {}
            return

        data_points, losses = strict_split_examples(examples, params)
        dimensions = [
            create_dimension(name, **param_processor.filter_kwargs(param_kwargs))
            for name, param_kwargs in sorted_items(params)
        ]

        optimizer = Optimizer(dimensions, base_estimator, **kwargs)
        optimizer.tell(data_points, losses)
        current_point = optimizer.ask()

        self.current_values = make_values(params, current_point)

    # decorator to raise an error if kwargs include an unsupported method
    @param_processor.implements_params$(
        backend_name="scikit-optimize",
        implemented_params=(
        # should match create_dimension above
        "choice",
        "randrange",
        "uniform",
    ))
    def param(self, name, **kwargs) = serve_values(
        name,
        kwargs,
        serving_values=self.current_values,
        fallback_func=self.random_backend.param,
    )
