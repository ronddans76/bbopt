"""
Handles standardizing param calls to use standard library random functions.
"""

# Imports:

from bbopt.util import (
    Num,
    json_serialize,
    format_err,
    all_isinstance,
)

# Preprocessors:

def preproc_randint(args):
    if len(args) != 2 or not all_isinstance(args, int):
        raise format_err(ValueError, "invalid arguments to randint", args)
    args[-1] += 1
    return "randrange", args

def preproc_random(args):
    if args:
        raise format_err(ValueError, "invalid arguments to random", args)
    return "uniform", [0, 1]

def preproc_gauss(args):
    if len(args) != 2 or not all_isinstance(args, Num):
        raise format_err(ValueError, "invalid arguments to gauss", gauss)
    return "normalvariate", args

def preproc_getrandbits(args):
    if len(args) != 1 or not isinstance(args[0], int):
        raise format_err(ValueError, "invalid arguments to getrandbits", args)
    return "randrange", [0, 2**args[0]]

# Handlers:

def handle_randrange(args):
    if not all_isinstance(args, int):
        raise format_err(ValueError, "invalid arguments to randrange", args)
    if len(args) == 1:
        start, stop, step = 0, args[0], 1
    elif len(args) == 2:
        start, stop, step = args[0], args[1], 1
    elif len(args) == 3:
        start, stop, step = args
    else:
        raise format_err(ValueError, "invalid arguments to randrange", args)
    return [start, stop, step]

def handle_choice(args):
    if len(args) != 1 or not isinstance(args[0], list):
        raise format_err(ValueError, "invalid arguments to choice", args)
    return args

def handle_sample(args):
    if len(args) != 2 or not isinstance(args[0], list) or not isinstance(args[1], int):
        raise format_err(ValueError, "invalid arguments to sample", args)
    return args

def handle_uniform(args):
    if len(args) != 2 or not all_isinstance(args, Num):
        raise format_err(ValueError, "invalid arguments to uniform", args)
    return args

def handle_triangular(args):
    if len(args) != 3 or not all_isinstance(args, Num):
        raise format_err(ValueError, "invalid arguments to triangular", args)
    return args

def handle_betavariate(args):
    if len(args) != 2 or not all_isinstance(args, Num):
        raise format_err(ValueError, "invalid arguments to betavariate", args)
    return args

def handle_expovariate(args):
    if len(args) != 1 or not all_isinstance(args, Num):
        raise format_err(ValueError, "invalid arguments to expovariate", args)
    return args

def handle_gammavariate(args):
    if len(args) != 2 or not all_isinstance(args, Num):
        raise format_err(ValueError, "invalid arguments to gammavariate", args)
    return args

def handle_normalvariate(args):
    if len(args) != 2 or not all_isinstance(args, Num):
        raise format_err(ValueError, "invalid arguments to normalvariate", args)
    return args

def handle_lognormvariate(args):
    if len(args) != 2 or not all_isinstance(args, Num):
        raise format_err(ValueError, "invalid arguments to lognormvariate", args)
    return args

def handle_vonmisesvariate(args):
    if len(args) != 2 or not all_isinstance(args, Num):
        raise format_err(ValueError, "invalid arguments to vonmisesvariate", args)
    return args

def handle_paretovariate(args):
    if len(args) != 1 or not all_isinstance(args, Num):
        raise format_err(ValueError, "invalid arguments to paretovariate", args)
    return args

def handle_weibullvariate(args):
    if len(args) != 2 or not all_isinstance(args, Num):
        raise format_err(ValueError, "invalid arguments to weibullvariate", args)
    return args

# Functions:

class ParamProcessor:
    """Processes param keyword arguments."""
    ignored = [
        "guess",
        "placeholder_when_missing",
    ]
    pre_processors = {
        "randint": preproc_randint,
        "random": preproc_random,
        "gauss": preproc_gauss,
        "getrandbits": preproc_getrandbits,
    }
    handlers = {
        "randrange": handle_randrange,
        "choice": handle_choice,
        "sample": handle_sample,
        "uniform": handle_uniform,
        "triangular": handle_triangular,
        "betavariate": handle_betavariate,
        "expovariate": handle_expovariate,
        "gammavariate": handle_gammavariate,
        "normalvariate": handle_normalvariate,
        "lognormvariate": handle_lognormvariate,
        "vonmisesvariate": handle_vonmisesvariate,
        "paretovariate": handle_paretovariate,
        "weibullvariate": handle_weibullvariate,
    }

    def filter_kwargs(self, kwargs):
        """Remove ignored keyword args."""
        new_kwargs = {}
        for func, args in kwargs.items():
            if func not in self.ignored:
                new_kwargs[func] = args
        return new_kwargs

    def standardize_kwargs(self, kwargs):
        """Standardizes param keyword args."""
        new_kwargs = {}
        saw_func = None
        for func, args in json_serialize(kwargs).items():
            # pass through ignored kwargs
            if func in self.ignored:
                new_kwargs[func] = args
                continue

            # only allow one function
            if saw_func is not None:
                raise ValueError("cannot have both %s and %s for a single param" % (saw_func, func))

            # standardize arguments to a list
            if not isinstance(args, list):
                args = [args]

            # run preprocessors
            if func in self.pre_processors:
                func, args = self.pre_processors[func](args)

            # run handlers
            if func in self.handlers:
                args = self.handlers[func](args)
            else:
                raise TypeError("unknown param option %r" % func)

            new_kwargs[func] = args
            saw_func = func

        # require some function
        if saw_func is None:
            raise TypeError("param requires a keyword option of the form <random function>=<args>")

        return new_kwargs |> json_serialize

param_processor = ParamProcessor()
