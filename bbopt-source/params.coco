"""
Handles standardizing param calls to use standard library random functions.
"""

from math import log as ln

from bbopt.util import (
    Num,
    format_err,
    all_isinstance,
    denumpy_all,
)


# Handlers:

def handle_randrange(args):
    if not all_isinstance(args, int):
        raise format_err(ValueError, "arguments to randrange must be integers, not", args)
    if len(args) == 1:
        start, stop, step = 0, args[0], 1
    elif len(args) == 2:
        start, stop, step = args[0], args[1], 1
    elif len(args) == 3:
        start, stop, step = args
    else:
        raise format_err(ValueError, "randrange expects between 1 and 3 arguments, not", args)
    return [start, stop, step]


def handle_choice(args):
    if len(args) != 1 or not isinstance(args[0], list):
        raise format_err(ValueError, "invalid arguments to choice", args)


def handle_uniform(args):
    if len(args) != 2 or not all_isinstance(args, Num):
        raise format_err(ValueError, "invalid arguments to uniform", args)


def handle_triangular(args):
    if len(args) != 3 or not all_isinstance(args, Num):
        raise format_err(ValueError, "invalid arguments to triangular", args)


def handle_betavariate(args):
    if len(args) != 2 or not all_isinstance(args, Num):
        raise format_err(ValueError, "invalid arguments to betavariate", args)


def handle_expovariate(args):
    if len(args) != 1 or not all_isinstance(args, Num):
        raise format_err(ValueError, "invalid arguments to expovariate", args)


def handle_gammavariate(args):
    if len(args) != 2 or not all_isinstance(args, Num):
        raise format_err(ValueError, "invalid arguments to gammavariate", args)


def handle_normalvariate(args):
    if len(args) != 2 or not all_isinstance(args, Num):
        raise format_err(ValueError, "invalid arguments to normalvariate", args)


def handle_vonmisesvariate(args):
    if len(args) != 2 or not all_isinstance(args, Num):
        raise format_err(ValueError, "invalid arguments to vonmisesvariate", args)


def handle_paretovariate(args):
    if len(args) != 1 or not all_isinstance(args, Num):
        raise format_err(ValueError, "invalid arguments to paretovariate", args)


def handle_weibullvariate(args):
    if len(args) != 2 or not all_isinstance(args, Num):
        raise format_err(ValueError, "invalid arguments to weibullvariate", args)


# Placeholders:

def placeholder_randrange(start, stop, step) =
    start


def placeholder_choice(choices) =
    choices$[0]


def placeholder_uniform(start, stop) =
    start


def placeholder_triangular(low, high, mode) =
    mode


def placeholder_betavariate(alpha, beta) =
    0.5


def placeholder_expovariate(lambd) =
    1/lambd


def placeholder_gammavariate(alpha, beta) =
    alpha/beta


def placeholder_normalvariate(mu, sigma) =
    mu


def placeholder_vonmisesvariate(mu, kappa) =
    mu


def placeholder_paretovariate(alpha) =
    1


def placeholder_weibullvariate(alpha, beta) =
    alpha * ln(2)**(1/beta)



# Processor:

class ParamProcessor:
    """Processes param keyword arguments."""
    handlers = {
        "randrange": handle_randrange,
        "choice": handle_choice,
        "uniform": handle_uniform,
        "triangular": handle_triangular,
        "betavariate": handle_betavariate,
        "expovariate": handle_expovariate,
        "gammavariate": handle_gammavariate,
        "normalvariate": handle_normalvariate,
        "vonmisesvariate": handle_vonmisesvariate,
        "paretovariate": handle_paretovariate,
        "weibullvariate": handle_weibullvariate,
    }
    placeholder_funcs = {
        "randrange": placeholder_randrange,
        "choice": placeholder_choice,
        "uniform": placeholder_uniform,
        "triangular": placeholder_triangular,
        "betavariate": placeholder_betavariate,
        "expovariate": placeholder_expovariate,
        "gammavariate": placeholder_gammavariate,
        "normalvariate": placeholder_normalvariate,
        "vonmisesvariate": placeholder_vonmisesvariate,
        "paretovariate": placeholder_paretovariate,
        "weibullvariate": placeholder_weibullvariate,
    }

    def modify_kwargs(self, func, kwargs):
        """Apply func to all kwargs with values in the random function's domain."""
        new_kwargs = {}
        for k, v in kwargs.items():
            if k in self.handlers:
                new_kwargs[k] = map(func, v)
            else:
                new_kwargs[k] = func(v)
        return new_kwargs

    def standardize_args(self, func, args):
        """Standardize param func and args."""
        # denumpy args
        args = denumpy_all(args)

        # standardize arguments to a list
        args = list(args)

        # detect invalid funcs
        if func not in self.handlers:
            raise ValueError(f"unknown parameter definition function {func}")

        # run handler
        result = self.handlers[func](args)
        args = result if result is not None else args

        return args

    def standardize_kwargs(self, kwargs):
        """Standardizes param keyword args."""
        return kwargs |> fmap$((k, v) -> denumpy_all((k, v)))

    def choose_default_placeholder(self, name, func, *args, **kwargs):
        """Choose a default placeholder_when_missing value for the given parameter."""
        if func not in self.placeholder_funcs:
            raise ValueError(f"unknown parameter definition function {func}")
        return self.placeholder_funcs[func](*args)


param_processor = ParamProcessor()
