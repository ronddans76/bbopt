"""
Utilities for use in BBopt backends.
"""

from collections.abc import Iterable

from bbopt.util import sorted_items
from bbopt.params import param_processor


def negate_objective(objective):
    """Take the negative of the given objective (converts a gain into a loss and vice versa)."""
    if isinstance(objective, Iterable):
        return objective |> map$(negate_objective) |> list
    else:
        return -objective


def make_features(
        values,
        params,
        fallback_func=param_processor.choose_default_placeholder,
        converters={},
        convert_fallback=True,
    ):
    """Return an iterator of the values for the parameters in sorted order with the given fallback function.
    If passed, converters must map funcs to functions from (value, *args) -> new_value which will be run
    on the resulting value for that func (but only on fallbacks if convert_fallback)."""
    for name, (func, args, kwargs) in sorted_items(params):
        # determine feature
        fallback = False
        match {=name: feature, **_} in values:
            pass
        else: match {"placeholder_when_missing": placeholder_value, **_} in kwargs:
            feature = placeholder_value
        else:
            fallback = True
            feature = fallback_func(name, func, *args, **kwargs)

        # run converters
        if not fallback or convert_fallback:
            match {=func: converter_func, **_} in converters:
                feature = converter_func(feature, *args)

        yield feature


def split_examples(
        examples,
        params,
        fallback_func=param_processor.choose_default_placeholder,
        converters={},
        convert_fallback=True,
    ):
    """Split examples into a list of data points and a list of losses with the given fallback function."""
    data_points, losses = [], []
    for example in examples:

        # extract values, loss
        case example:
            match {"values": values, "gain": gain, **_}:
                loss = negate_objective(gain)
            match {"values": values, "loss": loss, **_}:
                pass
        else:
            raise ValueError("invalid example {}".format(example))

        # extract features
        features = make_features(values, params, fallback_func, converters, convert_fallback) |> list

        # add to data_points, losses
        features |> data_points.append
        loss |> losses.append

    return data_points, losses


def make_values(params, point):
    """Return a dictionary with the values replaced by the values in point,
    where point is a list of the values corresponding to the sorted params."""
    values = {}
    for i, k in params |> sorted |> enumerate:
        values[k] = point[i]
    return values


def serve_values(
        name,
        func,
        args,
        kwargs,
        serving_values,
        fallback_func,
        backend_name=None,
        implemented_funcs=None,
        supported_kwargs=None,
    ):
    """Determines the parameter value to serve for the given parameter
    name and kwargs. First checks for unsupported funcs or kwargs, then
    uses the following algorithm:
    1. if name in serving_values, use serving_values[name], else
    2. if guess in kwargs, use the guess, else
    3. call fallback_func(name, func, *args, **kwargs)."""
    # validate arguments
    if implemented_funcs is not None:
        assert backend_name is not None, "serve_values expects a backend_name argument when doing func validation"
        if func not in implemented_funcs:
            raise ValueError(f"the {backend_name} backend does not implement the {func} function")
    if supported_kwargs is not None:
        assert backend_name is not None, "serve_values expects a backend_name argument when doing kwargs validation"
        unsupported_kwargs = set(kwargs) - set(supported_kwargs)
        if unsupported_kwargs:
            raise ValueError(f"the {backend_name} backend does not support {unsupported_kwargs} option(s)")

    # determine value
    match {=name: value, **_} in serving_values:
        return value
    else: match {"guess": guess, **_} in kwargs:
        return guess
    else:
        return fallback_func(name, func, *args, **kwargs)
