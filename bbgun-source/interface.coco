"""
The interface into BBGun for a file with black-box parameters.
"""

# Imports:

import json
import os.path

from bbgun.backends import init_backend
from bbgun.util import (
    norm_path,
    is_str,
    json_serialize,
)
from bbgun.constants import (
    default_backend,
    data_file_ext,
)

# Interface:

class BB:
    _bbs_by_file = {}  # all BB instances by file

    def __init__(self, file):
        if not is_str(file):
            raise TypeError("file must be a string")
        self._file = norm_path(file)
        if self._file in self._bbs_by_file:
            raise ValueError("BB instance for file %r already exists" % self.file)
        self._bbs_by_file[self._file] = self
        self.reset()

    def reset(self):
        """Reset to allow another run."""
        self._load_examples()
        self.run(default_backend)
        self._new_params = {}
        self._current_example = {"values": {}}

    def run(self, backend, **kwargs):
        """Optimize parameters using the given backend."""
        self._backend = init_backend(backend, self._examples, self._old_params, **kwargs)

    def param(self, name, **kwargs):
        """Create a black box parameter and return its value."""
        if self._current_example is None:
            raise ValueError("param calls must come before maximize/minimize")
        if not is_str(name):
            raise TypeError("name must be a string")
        if name in self._new_params:
            raise ValueError("parameter of name %r already exists" % name)
        kwargs = kwargs |> json_serialize
        value = self._backend.param(name, **kwargs) |> json_serialize
        self._new_params[name] = kwargs
        self._current_example["values"][name] = value
        return value

    def maximize(self, value):
        """Set the gain of the current run."""
        if self._current_example is None:
            raise ValueError("only one of maximize/minimize may be used")
        if callable(value):
            value = value()
        self._current_example["gain"] = value
        self._save_examples()

    def minimize(self, value):
        """Set the loss of the current run."""
        if self._current_example is None:
            raise ValueError("only one of maximize/minimize may be used")
        if callable(value):
            value = value()
        self._current_example["loss"] = value
        self._save_examples()

    @property
    def _data_file(self) = os.path.splitext(self._file)[0] + data_file_ext

    def _load_examples(self):
        """Load example data."""
        self._old_params = {}
        self._examples = []
        if os.path.exists(self._data_file):
            with open(self._data_file, "r") as df:
                contents = df.read()
                if contents:
                    {"params": params, "examples": examples} = json.loads(contents)
                    self._old_params = params
                    self._examples = examples

    @property
    def _json_data(self) = {
        "params": self._new_params,
        "examples": self._examples,
    }

    def _save_examples(self):
        """Save example data."""
        if self._current_example not in self._examples:
            self._examples.append(self._current_example)
        self._current_example = None
        with open(self._data_file, "w+") as df:
            self._json_data |> json.dumps |> str |> df.write
