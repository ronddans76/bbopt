"""
The backend and algorithm registries.
"""


class Registry:
    """Registry that keeps track of registered objects."""

    def __init__(self, obj_name, defaults=None, generators=None, aliases=None):
        self.obj_name = obj_name
        self.registered = defaults ?? {}
        self.generators = generators ?? {}
        self.aliases = aliases ?? {}

    def __getitem__(self, name):
        name = self.aliases.get(name, name)
        match {=name: value, **_} in self.registered:
            return self.registered[name]
        else: if name in self.generators:
            return self.run_gen(name)
        else:
            valid_names = ", ".join(repr(name) for name in self)
            raise ValueError(f"unknown {self.obj_name}: {name} (valid {self.obj_name}s: {valid_names})")

    def register(self, name, value):
        """Register value under the given name."""
        self.registered[name] = value

    def register_alias(self, name, alias):
        """Register an alias for the given name."""
        self.aliases[alias] = name

    def run_gen(self, name):
        """Run the generator for the given name."""
        value = self.generators[name]()
        if value is not None:
            self.register(name, value)
        del self.generators[name]
        return self.registered[name]

    def __iter__(self):
        yield from self.registered
        yield from self.generators
        yield from self.aliases

    def run_all_gens(self):
        """Run all generators."""
        for name in self.generators:
            self.run_gen(name)

    def items(self):
        """Get all items in the registry as (name, value) pairs."""
        self.run_all_gens()
        yield from self.registered.items()

    def asdict(self):
        """Convert registry to dictionary."""
        self.run_all_gens()
        return self.registered


backend_registry = Registry("backend")


match def init_backend(name, examples, params, *args, attempt_to_update_backend=None, **options):
    """Create a backend object of the given name with the given data."""
    backend_cls = backend_registry[name]
    if attempt_to_update_backend is not None and isinstance(attempt_to_update_backend, backend_cls):
        updated_backend = attempt_to_update_backend.attempt_update(examples, params, *args, **options)
        if updated_backend is True:
            return attempt_to_update_backend
        elif isinstance(updated_backend, backend_cls):
            return updated_backend
        else:
            assert updated_backend is False, f"invalid backend.attempt_update return value {updated_backend} from {backend_cls}"
    return backend_cls(examples, params, *args, **options)


alg_registry = Registry("algorithm")
