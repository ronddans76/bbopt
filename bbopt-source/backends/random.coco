"""
The random backend. Used for testing purposes.
Does not use existing data, simply spits out random valid values.
"""

import random

from bbopt.params import param_processor


class RandomBackend:
    """The random backend chooses parameter values randomly."""

    def __init__(self, examples=None, params=None):
        pass  # we're choosing randomly, so we ignore everything

    random_functions = {
        "randrange": random.randrange,
        "choice": random.choice,
        "uniform": random.uniform,
        "triangular": random.triangular,
        "betavariate": random.betavariate,
        "expovariate": random.expovariate,
        "gammavariate": random.gammavariate,
        "normalvariate": random.gauss,  # gauss is more efficient than normalvariate
        "vonmisesvariate": random.vonmisesvariate,
        "paretovariate": random.paretovariate,
        "weibullvariate": random.weibullvariate,
    }

    def param(self, name=None, **kwargs):
        func, args, options = param_processor.split_kwargs(kwargs)

        if options:
            raise TypeError("the random backend requires exactly one parameter,"
            " <name of the random function to call>=<argument(s) to that function>")

        if func not in self.random_functions:
            raise ValueError("unknown random function {}".format(func))

        return self.random_functions[func](*args)
