"""
The mixture backend. Lets you specify a distribution over different possible algorithms.
"""

import random

from bbopt.registry import alg_registry, init_backend


class MixtureBackend:
    """Mixture backend. Takes in a distribution over different possible algorithms
    of the form [(algorithm, weight)]. The properties selected_alg and selected_backend
    can be used to retrieve which alg/backend is currently being used."""

    def __init__(self, examples, params, distribution):
        total_weight = sum(weight for alg, weight in distribution)

        # generate cutoff points
        cum_probs = []
        prev_cutoff = 0
        for alg, weight in distribution:
            cutoff = prev_cutoff + weight / total_weight
            cum_probs.append((alg, cutoff))
            prev_cutoff = cutoff

        # randomly select algorithm
        rand_val = random.random()
        self.selected_alg = None
        for alg, cutoff in cum_probs:
            if rand_val <= cutoff:
                self.selected_alg = alg
                break

        # initialize backend
        self.selected_backend, kwargs = alg_registry[self.selected_alg]
        self.backend = init_backend(self.selected_backend, examples, params, **kwargs)

    def param(self, name, **kwargs) =
        self.backend.param(name, **kwargs)
