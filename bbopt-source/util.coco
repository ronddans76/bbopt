"""
Utilities for use across all of bbopt.
"""

# Imports:

import os.path
from collections.abc import Mapping, Iterable

# Objects:

Num = (int, float)
Str = (str, py_str)

# Functions:

def norm_path(path) = (
    path
    |> os.path.expanduser
    |> os.path.abspath
    |> os.path.realpath
    |> os.path.normcase
)

def json_serialize(obj):
    """Serialize obj for encoding in JSON."""
    if obj is None or isinstance(obj, (bool, int, float, str)):
        return obj
    if isinstance(obj, bytes):
        return str(obj, encoding="utf-8")
    if isinstance(obj, Mapping):
        serialized_dict = {}
        for k, v in obj.items():
            serialized_k = json_serialize(k)
            if not isinstance(serialized_k, str):
                raise TypeError("dict keys must be strings, not %r" % k)
            serialized_dict[k] = json_serialize(v)
        return serialized_dict
    if isinstance(obj, Iterable):
        serialized_list = []
        for x in obj:
            serialized_list.append(json_serialize(x))
        return serialized_list
    if type(obj).__module__ == "numpy":
        import numpy as np
        if np.issubdtype(obj, int):
            return int(obj)
        if np.issubdtype(obj, float):
            return float(obj)
        if np.issubdtype(obj, bool):
            return bool(obj)
    raise TypeError("invalid JSON object %r" % obj)

def sorted_items(params) =
    """Return an iterator of the dict's items sorted by its keys."""
    sorted(params.items())

def negate_objective(objective):
    if isinstance(objective, list):
        return objective |> map$(negate_objective) |> list
    else:
        return -objective

def make_features(values, params, default_placeholder=None):
    """Return an iterator of the values for the parameters in sorted order."""
    for feature, param_kwargs in sorted_items(params):
        if feature in values:
            yield values[feature]
        elif "placeholder_when_missing" in param_kwargs:
            yield param_kwargs["placeholder_when_missing"]
        else:
            yield default_placeholder

def split_examples(examples, params, default_placeholder=None):
    """Split examples into a list of data points and a list of losses."""
    data_points, losses = [], []
    for example in examples:
        case example:
            match {"values": values, "gain": gain, **_}:
                loss = negate_objective(gain)
            match {"values": values, "loss": loss, **_}:
                pass
        else:
            raise ValueError("invalid example %r" % example)
        make_features(values, params, default_placeholder) |> list |> data_points.append
        loss |> losses.append
    return data_points, losses

def replace_values(params, point):
    """Return a dictionary with the values replaced by the values in point,
    where point is a list of the values corresponding to the sorted params."""
    values = {}
    for i, k in params |> sorted |> enumerate:
        values[k] = point[i]
    return values

def all_isinstance(objs, types) =
    """Return whether all the objects have the desired type(s)."""
    objs |> map$(isinstance$(?, types)) |> all

def format_err(Error, message, object):
    """Creates an error with a formatted error message."""
    return Error(message + ": " + repr(object))

def best_example(examples):
    """Return the best example seen so far."""
    selected_example = {"values": {}}
    max_gain, min_loss = None, None
    for example in examples:
        case example:
            match {"values": values, "gain": gain, **_}:
                if min_loss is not None:
                    raise ValueError("cannot have examples with maximize and examples with minimize")
                if max_gain is None or gain >= max_gain:
                    selected_example = example
                    max_gain = gain
            match {"values": values, "loss": loss, **_}:
                if max_gain is not None:
                    raise ValueError("cannot have examples with maximize and examples with minimize")
                if min_loss is None or loss <= min_loss:
                    selected_example = example
                    min_loss = loss
        else:
            raise ValueError("invalid example %r" % example)
    return selected_example
