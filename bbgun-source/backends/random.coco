"""
The random backend. Used for testing purposes.
Does not use existing data, simply spits out random valid values.
"""

# Imports:

import random
from collections.abc import Iterable

# Backend:

class RandomBackend:
    """RandomBackend chooses random valid values."""

    def __init__(self, examples):
        pass  # we're choosing randomly, so we ignore the given example data!

    random_functions = {
        # name: (func, takes_iterable)
        "getrandbits": (random.getrandbits, False),
        "randrange": (random.randrange, False),
        "randint": (random.randint, False),
        "choice": (random.choice, True),
        "choices": (random.choices, False),
        "sample": (random.sample, False),
        "random": (random.random, False),
        "uniform": (random.uniform, False),
        "triangular": (random.triangular, False),
        "betavariate": (random.betavariate, False),
        "expovariate": (random.expovariate, False),
        "gammavariate": (random.gammavariate, False),
        "gauss": (random.gauss, False),
        "lognormvariate": (random.lognormvariate, False),
        "vonmisesvariate": (random.vonmisesvariate, False),
        "paretovariate": (random.paretovariate, False),
        "weibullvariate": (random.weibullvariate, False),
    }
    def param(self, name, **kwargs):
        if len(kwargs) != 1:
            raise TypeError("the random backend requires exactly one parameter,"
            " <name of the random function to call>=<argument(s) to that function>")
        cmd, args = kwargs.items()$[0]
        if cmd not in self.random_functions:
            raise ValueError("unknown random function %r" % cmd)
        func, takes_iterable = self.random_functions[cmd]
        if takes_iterable or not isinstance(args, Iterable):
            return func(args)
        else:
            return func(*args)
