"""
The scikit-optimize backend. Does black box optimization using scikit-optimize.
"""

from skopt import Optimizer
from skopt.space import (
    Categorical,
    Integer,
    Real,
)

from bbopt.backends.random import RandomBackend
from bbopt.params import param_processor
from bbopt.util import (
    sorted_items,
    split_examples,
    make_values,
    serve_values,
)


# Utilities:

@param_processor.splitting_kwargs$(ignore_options=True)
def create_dimension(name, func, args):
    """Create a scikit-optimize dimension for the given param kwargs."""
    case func:
        match "choice":
            return Categorical(*args)
        match "randrange":
            start, stop, step = args
            if step != 1:
                raise ValueError("the scikit-optimize backend only supports a randrange step size of 1")
            stop -= 1  # scikit-optimize ranges are inclusive
            return Integer(start, stop)
        match "uniform":
            return Real(*args)
    raise TypeError("insufficiently specified parameter {}".format(name))


@param_processor.splitting_kwargs$(ignore_options=True)
def choose_default_placeholder(name, func, args):
    """Choose a default placeholder_when_missing value for the given param kwargs."""
    case func:
        match "choice":
            choices, = args
            return choices$[0]
        match "randrange":
            start, stop, step = args
            return start
        match "uniform":
            start, stop = args
            return start
    raise TypeError("insufficiently specified parameter {}".format(name))


# Backend:

class SkoptBackend:
    """The scikit-optimize backend uses scikit-optimize for black box optimization."""
    random_backend = RandomBackend()

    def __init__(self, examples, params, base_estimator="gp", **kwargs):
        if not examples:
            self.current_values = {}
            return

        data_points, losses = split_examples(examples, params, fallback_func=choose_default_placeholder)
        dimensions = [
            create_dimension(name, **param_kwargs)
            for name, param_kwargs in sorted_items(params)
        ]

        optimizer = Optimizer(dimensions, base_estimator, **kwargs)
        optimizer.tell(data_points, losses)
        current_point = optimizer.ask()

        self.current_values = make_values(params, current_point)

    # decorator to raise an error if kwargs include an unsupported method
    @param_processor.implements_params$(
        backend_name="scikit-optimize",
        implemented_funcs=(
            # should match create_dimension and choose_default_placeholder above
            "choice",
            "randrange",
            "uniform",
        ),
        supported_options=(
            "guess",
            "placeholder_when_missing",
        ),
    )
    def param(self, name, **kwargs) = serve_values(
        name,
        kwargs,
        serving_values=self.current_values,
        fallback_func=self.random_backend.param,
    )
