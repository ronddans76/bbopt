"""
The mixture backend. Lets you specify a distribution over different possible algorithms.
"""

import random

from bbopt import constants
from bbopt.registry import alg_registry
from bbopt.backends.util import (
    Backend,
    init_backend,
)


class MixtureBackend(Backend):
    """Mixture backend. Takes in a distribution over different possible algorithms
    of the form [(algorithm, weight)]. The properties selected_alg and selected_backend
    can be used to retrieve which alg/backend is currently being used."""
    backend_name = "mixture"

    def __init__(self, examples, params, distribution):
        if distribution == "epsilon_greedy":
            distribution = (
                ("random", constants.eps_greedy_explore_prob),
                ("greedy", 1 - constants.eps_greedy_explore_prob),
            )

        self.params = params
        total_weight = sum(weight for alg, weight in distribution)

        # generate cutoff points
        self.cum_probs = []
        prev_cutoff = 0
        for alg, weight in distribution:
            cutoff = prev_cutoff + weight / total_weight
            self.cum_probs.append((alg, cutoff))
            prev_cutoff = cutoff

        self.backend_store = {}
        self.tell_examples(examples)

    @override
    def tell_examples(self, examples):
        """Special method that allows fast updating of the backend with new examples."""
        # randomly select algorithm
        rand_val = random.random()
        self.selected_alg = None
        for alg, cutoff in self.cum_probs:
            if rand_val <= cutoff:
                self.selected_alg = alg
                break

        # initialize backend
        self.selected_backend, options = alg_registry[self.selected_alg]
        self.current_backend = init_backend(
            self.selected_backend,
            examples,
            self.params,
            attempt_to_update_backend=self.backend_store.get(self.selected_alg),
            **options,
        )
        self.backend_store[self.selected_alg] = self.current_backend

    @override
    def param(self, name, func, *args, **kwargs) =
        """Defer parameter selection to the selected backend."""
        self.current_backend.param(name, func, *args, **kwargs)


# Registered names:

MixtureBackend.register()
MixtureBackend.register_alg("epsilon_greedy", distribution="epsilon_greedy")
