import unittest

from bbopt import constants


# Utilities:

def is_hashable(obj):
    """Determine if obj is hashable."""
    try:
        hash(obj)
    except Exception:
        return False
    else:
        return True


def assert_dict_or_callable_or_hashable(name, obj):
    """Assert obj is hashable, or for dicts apply recursively to values."""
    if isinstance(obj, dict):
        for val in obj.values():
            assert_dict_or_callable_or_hashable(name, val)
    elif not callable(obj):
        assert is_hashable(obj), "Constant " + name + " contains unhashable values"


# Tests:

class TestConstants(unittest.TestCase):

    def test_immutable(self):
        for name, value in vars(constants).items():
            if not name.startswith("__"):
                assert not isinstance(value, list), "Constant " + name + " should be tuple, not list"
                assert not isinstance(value, set), "Constant " + name + " should be frozenset, not set"
                assert_dict_or_callable_or_hashable(name, value)
